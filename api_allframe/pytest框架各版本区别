1.requests是python的第三方库，用来发送http请求
2.jsonpath是用来解析json数据的库
3.allure是用来生成测试报告的库


注：下一个版只写明与上一版本的不同之处以及新增功能，没说明的与上一版本一致

------------>apirun1版本：
最基础的线性代码（没有使用关键字封装）
1.单个用例添加步骤@allure.step("步骤：xxxx")，在用例内部添加测试步骤with allure.step("步骤一：xxxx")，
2.用例添加了用例标题@allure.title("xxxxxx")
3.接口请求使用requests库，使用requests.post(参数)发送请求
4.接口关联使用上一个接口数据,使用jsonpath提取，下一个接口直接引用变量名称使用
5.框架添加用例统一执行入口:run_main文件，调用pytest.main()方法执行用例,运行该文件时，pytest会自动搜索当前目录下的所有符合条件的用例文件并执行


------------>apirun2版本：
1. 框架添加关键字封装功能，
将发送请求的方法封装成一个类Keyword,分别封装常用的get方法和post方法(request_post)，参数使用**kwargs方式传入，表示可以传入多个参数
   接口请求使用封装好的Keyword类，接口使用创建的对象keyword调用封装的方法发送请求，keyword.request_post(参数)方法发送请求（与apirun1第3点对比）
2.给用例添加日志，pytest.int文件设置日志的开关、日志级别、日志输出格式、日志存放位置及文件名；conftest.py文件添加钩子函数（pytest固定写法）,
打印用例ID,测试结果，故障表示，异常，用例执行耗时等信息，两者需要结合使用
3.每一个需要依赖登录接口的用例都需要将登录接口重新写一遍,代码很冗余

------------>apirun3版本：
1.在conftest.py文件中新增定义一个关于登录功能的夹具函数login_fixture,在需要登录接口(比如加入购物车)为前置条件的用例中，不需要再写一次登录的接口，
直接在用例中引用login_fixture，将夹具当做函数参数传入，即可使用登录后的token值（对比apirun2版本的第3点)---（test_02_addcart3.py的第16行、18行代码）



----------->apirun4版本：
1.在一个项目的业务流程中，会用到很多提取之后的变量（例如提交订单需要先登录【token】----->获取购物车商品列表【cart_id】----->获取地址【address_id】---->最后再提交订单），
需要获取多个变量，不可能每一个前置功能都写一个fixture然后在用例中同时引用,所以使用全局变量的方式来储存这些变量，定义一个方法在global_context.py【GlobalContext】
用来管理全局变量，进行全局变量增加/修改/显示;
2.在【1】的基础上，再封装一个关键字函数，将响应数据提取出来并且放到全局变量中（keyword.py---->ex_jsonData方法）,
主要思想是在发送请求时先将响应数据保存在全局变量字典中（keyword.py中的request_post方法），赋给变量current_response；
然后使用ex_jsonData方法将current_response的数据获取出来；
之后传入响应数据response+jsonpath表达式+下标来获取我们需要的数据，将提取出来的数据赋值一个变量A，并且保存在全局变量中，需要用A变量直接调用即可
例如，我们在登录接口返回一个token值，变量名为token_result,那么在加入购物车接口，可以直接使用token_result变量获取值（test_02_addcart4的第16行代码）
上述2，就可以不用调用login_fixture夹具，直接在用例中引用token_result的值


------------>apirun5版本：
1.新增变量渲染功能，如果一个接口需要同时使用全局变量中的多个变量，那么就需要引用多次，如：
    token_value=GlobalContext().get_dict("token_result")
    msg_value=GlobalContext().get_dict("msg_result")
    cart_id_value=GlobalContext().get_dict("cart_id_result")
    address_id_value=GlobalContext().get_dict("address_id_result")
需要一个变量调用一次get_dict()方法，代码冗余，所以新增一个变量渲染功能，将每个变量都渲染成字符串，eval(var_render(request_data,GlobalContext().show_dict()))
直接在用例中使用{{全局变量的变量名}}引用即可，例：
在登录接口我们保存的token的变量名是token_result,可以直接在加入购物车接口使用{{token_result}}引用这个值（test_02_addcart5的第18行代码）



------------->apirun6版本：
1.新增数据驱动功能，将用例数据和用例逻辑分离，如对于登录接口，传入不同的账号和密码进行测试
2.









